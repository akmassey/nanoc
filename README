nanoc

== Overview

nanoc is a simple but very flexible content management system written in Ruby. It operates on local files, and therefore does not run on the server. nanoc "processes" files, which is more or less the same as "compiling" the local source files into HTML (usually), by evaluating eRuby, Markdown, etc.

== Getting started

=== Create a site

To create a nanoc-powered site, do this:

	% nanoc create_site my_site

This will create a directory named 'my_site' in the current working directory, filled with other directories and files needed by nanoc. Here's what nanoc says:

	create my_site
	create my_site/output
	create my_site/config.yaml
	create my_site/meta.yaml
	create my_site/layout
	create my_site/layout/default.rhtml
	create my_site/lib
	create my_site/lib/default.rb
	create my_site/templates
	create my_site/templates/default
	create my_site/templates/default/index.txt
	create my_site/templates/default/meta.yaml
	create my_site/content
	create my_site/content/index.txt
	create my_site/content/meta.yaml

For more information about what these directories are about, read the 'Directory Structure' section.

=== Create a page

cd into the newly created directory and create a page, like this:

	% cd my_site
	% nanoc create_page about

This will create a directory 'about' in the 'content' directory of the current working directory. Here's what nanoc says:

	create content/about
	create content/about/index.txt
	create content/about/meta.yaml

The 'about' directory contains a metafile as well as a content file. Open the metafile.

...

=== Process the site

Lastly, process the output, like this:

	% nanoc process

This will process all pages and put them in their layout.

...

== Directory structure

The general directory structure looks like this:

* /
  * config.yaml
  * content/
  * layout/
  * lib/
  * output/
  * templates/

The 'config.yaml' file contains general configuration details. Read the 'Configuration' section for more information.

The 'content' directory contains unprocessed content, such as pages and articles. Every subdirectory of the 'content' directory, as well as 'content' directory itself, contains an index file and a meta file.

The 'layout' directory contains layout files in eRuby format.

The 'lib' directory contains Ruby source files. These files will be loaded when nanoc starts processing.

The 'output' directory will contain all processed HTML files generated by nanoc. This can be this site's webroot. Note that the output directory path can be changed in the configuration file.

The 'templates' directory contains page templates, used when generating new pages.

== Content

...

=== Pages

A page is represented by a directory in the 'content'. Each page has two files: a content file, and a meta file. The content file is usually named index.html, but can have any extension. The meta file can contain metadata about the page, as well as instructions on how to format the page.

=== Meta files

A meta file is a YAML file consisting of key-value pairs. You can put virtually anything in the meta file, as long as you don't use the built-in keywords for your custom metadata.

Here's a list of built-in keywords and what they do:

- layout: The name of the layout to use for this page.
- filters: A list of filters to use for this page. Available filters are "markdown", "eruby" and "rubypants".
- has_dependencies: See next section.
- extension
- custom_path

=== Dependencies

Pages can have dependencies on other pages. Such a page can only be processed _after_ the pages it depends on have been processed. For example, a list of all articles on your site depends on all articles.

To indicate that a given page has dependencies, set +has_dependencies+ to +true+ in the page's meta file. nanoc will process pages with dependencies after pages without dependencies.

Note that dependencies cannot be chained: pages cannot have dependencies on pages that have dependencies as well. For example, if page A depends on page B, which depends on page C, nanoc will be not be able to figure out that page B has to be processed before page A, and will process pages A and B in a random sequence.

== Layouts

A layout (not to be confused with a template) is a file in which pages will be embedded. Layouts usually contains a header, a footer, etc. For a page to be embeddable in a layout, the layout must print the +@content+ variable (something like +<%= @content %>+ or so).

== Templates

...

== Configuration

The 'config.yaml' file contains general configuration details. Currently, the only configuration option is the output directory ('output_dir'), which can be set to a path to which nanoc will write its output.

== To do

nanoc isn't finished, and probably never will be. Here's a list of stuff which hasn't been implemented yet.

* Nested layouts
* Chained dependencies
* Custom Rake tasks

== Contact

You can reach me at <denis.defreyne@stoneship.org>. Feel free to send any feedback. Thanks!

== Copyright

Copyright (c) 2007 Denis Defreyne

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
